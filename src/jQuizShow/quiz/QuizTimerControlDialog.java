/*
 * QuizTimerControlDialog.java
 *
 * Created on February 29, 2004, 3:48 PM
 *
 * $Id: QuizTimerControlDialog.java,v 1.1 2004/04/02 06:02:00 sdchen Exp $
 *
 *============================================================================
 *
 * Copyright (C) 2004  Steven D. Chen
 *
 * This file is part of jQuizShow.
 *
 * jQuizShow is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * jQuizShow is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License (GPL)
 * along with jQuizShow; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *============================================================================
 *
 * Modifications:
 *
 *    $Log: QuizTimerControlDialog.java,v $
 *    Revision 1.1  2004/04/02 06:02:00  sdchen
 *    Snapshot of jQuizShow 1.1 alpha06 development
 *
 *
 */

package jQuizShow.quiz;

/**
 * This dialog is used to set the time limits for the various timers used in
 * the jQuizShow Quiz mode.
 *
 * @author  Steve
 */

import javax.swing.*;

import jQuizShow.*;
import jQuizShow.event.*;
import jQuizShow.net.*;

public class QuizTimerControlDialog
        extends
            javax.swing.JInternalFrame
        implements
            GameStateChangeListener
            
{
    
    /** Creates new form QuizTimerControlDialog */
    public QuizTimerControlDialog() {
        super(Main.getMessage("label_question_timer"),
		false, true, false, true);

        initComponents();

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        
        m_quizState = QuizState.getInstance(false);

        m_quizState.addGameStateChangeListener(this);
        
        // Create an instance of the StatePacket.
        m_statePacket = new StatePacket();
        
        // Get the PacketProcessor instance
        m_packetProcessor = PacketProcessor.getInstance();
        
        update();
    }

    
    /**
     * Updates the current settings on the dialog from the QuizState.
     */
    public void  update()
    {
        questionTimerSlider.setValue(m_quizState.getQuestionTimerLimit());

        delayAtStartSlider.setValue(m_quizState.getDelayValue(
                QuizState.DELAY_AT_START));

        delayAfterQuestionSlider.setValue(m_quizState.getDelayValue(
                QuizState.DELAY_AFTER_QUESTION));

        delayAfterTimerExpiresSlider.setValue(m_quizState.getDelayValue(
                QuizState.DELAY_AFTER_TIMER_EXPIRES));
        
        return;
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        centerPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        questionTimeLabel = new javax.swing.JLabel();
        questionTimerSlider = new javax.swing.JSlider();
        jPanel2 = new javax.swing.JPanel();
        delayAtStartLabel = new javax.swing.JLabel();
        delayAtStartSlider = new javax.swing.JSlider();
        delayAfterQuestionLabel = new javax.swing.JLabel();
        delayAfterQuestionSlider = new javax.swing.JSlider();
        delayAfterTimerExpiresLabel = new javax.swing.JLabel();
        delayAfterTimerExpiresSlider = new javax.swing.JSlider();
        southPanel = new javax.swing.JPanel();
        applyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setTitle("Quiz Timer / Delay Control Dialog");
        setPreferredSize(new java.awt.Dimension(800, 100));
        centerPanel.setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder("Timers"));
        questionTimeLabel.setText("Countdown timer");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1000.0;
        jPanel1.add(questionTimeLabel, gridBagConstraints);

        questionTimerSlider.setMajorTickSpacing(10);
        questionTimerSlider.setMaximum(90);
        questionTimerSlider.setMinorTickSpacing(5);
        questionTimerSlider.setPaintLabels(true);
        questionTimerSlider.setPaintTicks(true);
        questionTimerSlider.setSnapToTicks(true);
        questionTimerSlider.setValue(15);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 5000.0;
        gridBagConstraints.weighty = 1000.0;
        jPanel1.add(questionTimerSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1000.0;
        centerPanel.add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder("Delay Settings"));
        delayAtStartLabel.setText("Delay at start of round");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1000.0;
        jPanel2.add(delayAtStartLabel, gridBagConstraints);

        delayAtStartSlider.setMajorTickSpacing(5);
        delayAtStartSlider.setMaximum(15);
        delayAtStartSlider.setMinorTickSpacing(1);
        delayAtStartSlider.setPaintLabels(true);
        delayAtStartSlider.setPaintTicks(true);
        delayAtStartSlider.setSnapToTicks(true);
        delayAtStartSlider.setValue(2);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1000.0;
        jPanel2.add(delayAtStartSlider, gridBagConstraints);

        delayAfterQuestionLabel.setText("Delay after question shown");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1000.0;
        jPanel2.add(delayAfterQuestionLabel, gridBagConstraints);

        delayAfterQuestionSlider.setMajorTickSpacing(5);
        delayAfterQuestionSlider.setMaximum(15);
        delayAfterQuestionSlider.setMinorTickSpacing(1);
        delayAfterQuestionSlider.setPaintLabels(true);
        delayAfterQuestionSlider.setPaintTicks(true);
        delayAfterQuestionSlider.setSnapToTicks(true);
        delayAfterQuestionSlider.setValue(5);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1000.0;
        jPanel2.add(delayAfterQuestionSlider, gridBagConstraints);

        delayAfterTimerExpiresLabel.setText("Delay after timer expires");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1000.0;
        jPanel2.add(delayAfterTimerExpiresLabel, gridBagConstraints);

        delayAfterTimerExpiresSlider.setMajorTickSpacing(5);
        delayAfterTimerExpiresSlider.setMaximum(15);
        delayAfterTimerExpiresSlider.setMinorTickSpacing(1);
        delayAfterTimerExpiresSlider.setPaintLabels(true);
        delayAfterTimerExpiresSlider.setPaintTicks(true);
        delayAfterTimerExpiresSlider.setSnapToTicks(true);
        delayAfterTimerExpiresSlider.setValue(5);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1000.0;
        jPanel2.add(delayAfterTimerExpiresSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1000.0;
        centerPanel.add(jPanel2, gridBagConstraints);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        southPanel.add(applyButton);

        cancelButton.setText("Close");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        southPanel.add(cancelButton);

        getContentPane().add(southPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        int  timerValue = questionTimerSlider.getValue();
        
        if (m_quizState.getQuestionTimerLimit() != timerValue)
        {
            /* Set the question timer limit */
            m_statePacket.setType(QuizStateEnum.SET_QUESTION_TIMER_LIMIT);
            m_statePacket.setQuestionTimerLimit(timerValue);

            m_packetProcessor.processStatePacket(m_statePacket);    // Do it
        }
        
        m_quizState.setDelayValue(QuizState.DELAY_AT_START,
                delayAtStartSlider.getValue());

        m_quizState.setDelayValue(QuizState.DELAY_AFTER_QUESTION,
                delayAfterQuestionSlider.getValue());

        m_quizState.setDelayValue(QuizState.DELAY_AFTER_TIMER_EXPIRES,
                delayAfterTimerExpiresSlider.getValue());
    }//GEN-LAST:event_applyButtonActionPerformed

    public void gameStateChanged(GameStateChangeEvent evt) {
        QuizStateEnum    type = (QuizStateEnum) evt.getType();
        
        if (type == QuizStateEnum.SET_QUESTION_TIMER_LIMIT)
        {
            questionTimerSlider.setValue(m_quizState.getQuestionTimerLimit());
        }
    }    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JLabel delayAfterQuestionLabel;
    private javax.swing.JSlider delayAfterQuestionSlider;
    private javax.swing.JLabel delayAfterTimerExpiresLabel;
    private javax.swing.JSlider delayAfterTimerExpiresSlider;
    private javax.swing.JLabel delayAtStartLabel;
    private javax.swing.JSlider delayAtStartSlider;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel questionTimeLabel;
    private javax.swing.JSlider questionTimerSlider;
    private javax.swing.JPanel southPanel;
    // End of variables declaration//GEN-END:variables
    
    private QuizState    m_quizState;

    private StatePacket     m_statePacket;
    
    private PacketProcessor m_packetProcessor;
}
